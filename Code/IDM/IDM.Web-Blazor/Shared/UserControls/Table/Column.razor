@typeparam TItem
@if (Item == null)
{
    @*Table Column Header*@
    <th class="@css">
        @Label
    </th>
}
else if(ChildContent == null)
{
    //Get Property by Name
    var property = typeof(TItem).GetProperty(Name);
    if (property == null)
        return;

    //Get Property Value
    var value = property.GetValue(Item);

    <td class="@css">
        @*Table Column Data*@
        @switch (Name)
        {
            case Constants.PROPERTY_TYPE_DESCRIPTION:
            case Constants.PROPERTY_STATUS_DESCRIPTION:
                <span class="cstm-badge @value?.ToString()?.ToLower()">
                    @value
                </span>
                break;
            default:
                @value
                break;
        }
    </td>
}
else
{
    @*Table Column Data specific for Buttons, Inputs, Checkboxs, Dropdowns and etc.*@
    <td class="@css">@ChildContent</td>
}

@code {
    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public string Label { get; set; }

    [CascadingParameter]
    public TItem Item { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public string css
    {
        get
        {
            switch (Name)
            {
                case Constants.PROPERTY_TYPE_DESCRIPTION:
                    return Constants.CSS_COL_TYPE;
                case Constants.PROPERTY_STATUS_DESCRIPTION:
                    return Constants.CSS_COL_STATUS;
                default:
                    return string.Empty;
            }
        }
    }
}
